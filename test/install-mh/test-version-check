#!/bin/sh
######################################################
#
# Test display of new version welcome message.  This
# doesn't really belong in install-mh.
#
######################################################

set -e

if test -z "${MH_OBJ_DIR}"; then
    srcdir=`dirname $0`/../..
    MH_OBJ_DIR=`cd $srcdir && pwd`; export MH_OBJ_DIR
fi

. "${MH_OBJ_DIR}/test/common.sh"

setup_test

require_prog script
if script -S /bin/sh 'echo OK' /dev/null 2>&1 | egrep 'OK' >/dev/null; then
    #### script(1) uses -S to set the shell that it runs.
    use_dash_S=1
else
    #### Assume that script(1) uses SHELL environment variable.
    use_dash_S=0
fi

#### Run a command but don't wait for user input.  script(1) seems to do
#### what we want by not waiting when run in the background.
run_without_input() {
    #### Create a command to use as a shell for script.
    cat >"${cmd}" <<EOF
#! /bin/sh
$*
EOF
    chmod +x "${cmd}"

    if [ ${use_dash_S} -eq 1 ]; then
        script -S "${cmd}" "$actual" >/dev/null &
    else
        SHELL="${cmd}" script "$actual" >/dev/null &
    fi

    wait $!
}

actual="$MH_TEST_DIR/test-version-check$$.actual"
context="${MH_TEST_DIR}"/Mail/context
version="Version: nmh-${MH_VERSION}"
cmd="${MH_TEST_DIR}/Mail/cmd"

# Removing Version will trigger the welcome message.  (setup_test
# inserted it so that other tests wouldn't show it.)
grep -v Version "$context" > "$context.NEW"
mv -f "$context.NEW" "$context"


start_test 'mhparam skips the welcome message'
run_without_input mhparam path
grep 'Welcome to nmh version ' "$actual" >/dev/null  &&  false
# Make sure that version wasn't added to context.
grep "^${version}$" "${MH_TEST_DIR}/Mail/context" >/dev/null  &&  false
rm "$actual"


start_test 'Welcome: disable in profile skips the welcome message'
cp "${MH}" "${MH}-welcome"
printf 'Welcome: disable\n' >> "${MH}-welcome"
# Run the function in subshell instead of augmenting the environment
# for a single command, so that the environment does not retain the
# MH setting.  That can happen when run under distcheck, depending
# on the user's shell.
(MH="${MH}-welcome"; run_without_input pick last)
rm "${MH}-welcome"
grep 'Welcome to nmh version ' "$actual" >/dev/null  &&  false
# Make sure that version wasn't added to context.
grep "^${version}$" "${MH_TEST_DIR}/Mail/context" >/dev/null  &&  false
rm "$actual"


start_test 'with welcome message'
echo MH="${MH}" # ???? debug
run_without_input pick last
cat "$actual" # ???? debug
grep 'Welcome to nmh version ' "$actual" >/dev/null
# Make sure that version was added to context.
grep "^${version}$" "${MH_TEST_DIR}/Mail/context" >/dev/null
rm "$actual"


start_test 'without welcome message'
# After running the previous test, this one should not have
# the welcome message.
run_without_input pick last
grep 'Welcome to nmh version ' "$actual" >/dev/null  &&  false
# Make sure that version is still in context.
grep "^${version}$" "${MH_TEST_DIR}/Mail/context" >/dev/null
rm "$actual"


start_test 'with MHCONTEXT, welcome only if older'
MHCONTEXT="${MH_TEST_DIR}/Mail/context2"; export MHCONTEXT
printf 'Version: nmh-1.5\n' >"${MHCONTEXT}"
run_without_input pick last
grep 'Welcome to nmh version ' "$actual" >/dev/null
# And make sure that version did get updated in context.
grep "^${version}$" "${MHCONTEXT}" >/dev/null
rm "$actual"


start_test "with MHCONTEXT doesn't welcome if newer"
printf 'Version: nmh-10000.0\n' >"${MHCONTEXT}"
run_without_input pick last
grep 'Welcome to nmh version ' "$actual" >/dev/null  &&  false
# And make sure that version didn't get updated in context.
grep '^Version: nmh-10000.0$' "${MHCONTEXT}" >/dev/null
rm "$actual"


start_test 'with MHCONTEXT but no version, no welcome and update'
printf '' >"${MHCONTEXT}"
run_without_input pick last
grep 'Welcome to nmh version ' "$actual" >/dev/null  &&  false
# And make sure that version did get updated in context.
grep "^${version}$" "${MHCONTEXT}" >/dev/null
rm "$actual"


finish_test
exit $failed
