#!/bin/sh
######################################################
#
# Test that whatnow's "ls" copes with directory names
# which have spaces in them (see bug #23319)
#
######################################################

set -e

if test -z "${MH_OBJ_DIR}"; then
    srcdir=`dirname "$0"`/../..
    MH_OBJ_DIR=`cd "$srcdir" && pwd`; export MH_OBJ_DIR
fi

. "$MH_OBJ_DIR/test/common.sh"

setup_test

# Set TERM to get consistent output.
TERM=dumb; export TERM

cd "$MH_TEST_DIR"
testname="baz's boz"
testname_quoted="baz\'s\ boz"
touch "$testname"
# whatnow's attach stuff needs a draft to work on
cp "$MH_TEST_DIR/Mail/inbox/1" "$MH_TEST_DIR/Mail/draft"

expectederr=$MH_TEST_DIR/$$.expectederr
actualerr=$MH_TEST_DIR/$$.actualerr
expected=$MH_TEST_DIR/$$.expected
actual=$MH_TEST_DIR/$$.actual

rm -f $expected $expectederr $actual $actualerr
touch $expected $expectederr $actual $actualerr

#
# Sigh.  Different readline versions change echoing behavior, so we need
# to deal.
#

set +e
whatnowtest=`echo cd | whatnow -prompt ''`
set -e

case ${whatnowtest} in
    cd) cat >"$expected" <<EOF
attach $testname_quoted
alist
$testname
detach $testname_quoted
alist
EOF
    ;;
    "") cat >"$expected" <<EOF
$testname
EOF
    ;;
    *) echo "Unknown response to whatnow readline test"
    echo "Response is: ${whatnowtest}"
    exit 1
    ;;
esac

# whatnow's exit status is always 1 so that is not a failure
set +e
echo "attach $testname_quoted" | \
  run_prog whatnow -attach foo -noedit -prompt '' 2>>$actualerr >>$actual
echo "alist" | \
  run_prog whatnow -attach foo -noedit -prompt '' 2>>$actualerr >>$actual
echo "detach $testname_quoted" | \
  run_prog whatnow -attach foo -noedit -prompt '' 2>>$actualerr >>$actual
echo "alist" | \
  run_prog whatnow -attach foo -noedit -prompt '' 2>>$actualerr >>$actual
set -e

check "$expectederr" "$actualerr"
check "$expected" "$actual"

cat >"$expected" <<EOF

What now? at
whatnow: attach command requires file argument(s).

What now? at -v
whatnow: attach command requires file argument(s).

What now? at -v -a
whatnow: ignoring attach -a without format argument.
whatnow: attach command requires file argument(s).

What now? at -v -a 0
whatnow: attach command requires file argument(s).

What now? at -a
whatnow: ignoring attach -a without format argument.
whatnow: attach command requires file argument(s).

What now? at -a -v
whatnow: ignoring attach -a without format argument.
whatnow: attach command requires file argument(s).

What now? at -a 0 -v
whatnow: attach command requires file argument(s).

What now? at -a 0 Mail/context

What now? at -v -a Mail/context
whatnow: ignoring attach -a without format argument.
#text/plain; charset=us-ascii; name="context" <> [context]{attachment} ${MH_TEST_DIR}/Mail/context

What now? at -v -a 3 Mail/context
whatnow: ingoring invalid attachformat value of 3
#text/plain; charset=us-ascii; name="context" <> [context]{attachment} ${MH_TEST_DIR}/Mail/context

What now? at -v Mail/context
#text/plain; charset=us-ascii; name="context" <> [context]{attachment} ${MH_TEST_DIR}/Mail/context

What now? at -v -a 1 Mail/context
#text/plain; charset=us-ascii; name="context" <> [context]{attachment} ${MH_TEST_DIR}/Mail/context

What now? at -v -a 0 Mail/context
#text/plain; charset=us-ascii; name="context"; x-unix-mode=0644 [  ASCII text ] ${MH_TEST_DIR}/Mail/context

What now? quit -delete
EOF

set +e
printf '%s\n' \
'at' \
'at -v' \
'at -v -a' \
'at -v -a 0' \
'at -a' \
'at -a -v' \
'at -a 0 -v' \
'at -a 0 Mail/context' \
'at -v -a Mail/context' \
'at -v -a 3 Mail/context' \
'at -v Mail/context' \
'at -v -a 1 Mail/context' \
'at -v -a 0 Mail/context' \
'quit -delete' | whatnow >$actual 2>&1
set -e

check "$expected" "$actual"

test ${failed:-0} -eq 0  &&  rm "$testname"

exit $failed
