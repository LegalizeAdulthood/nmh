head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	92.05.12.22.08.28;	author jromine;	state Exp;
branches;
next	1.3;

1.3
date	90.04.05.15.06.49;	author sources;	state Exp;
branches;
next	1.2;

1.2
date	90.02.23.10.33.22;	author sources;	state Exp;
branches;
next	1.1;

1.1
date	90.02.23.10.33.04;	author sources;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix ifdefs
@
text
@/* tws.h */
/* @@(#)$Id: tws.h,v 1.3 1990/04/05 15:06:49 sources Exp jromine $ */

#define	DSTXXX
			/* DST vs. GMT nonsense */

struct tws {
    int     tw_sec;
    int     tw_min;
    int     tw_hour;

    int     tw_mday;
    int     tw_mon;
    int     tw_year;

    int     tw_wday;
    int     tw_yday;

    int     tw_zone;

    long    tw_clock;

    int     tw_flags;
#define	TW_NULL	0x0000
#define	TW_SDAY	0x0003		/* how day-of-week was determined */
#define	  TW_SNIL	0x0000	/*   not given */
#define	  TW_SEXP	0x0001	/*   explicitly given */
#define	  TW_SIMP	0x0002	/*   implicitly given */
#define	TW_SZONE 0x0004		/* how timezone was determined */
#define	  TW_SZNIL	0x0000	/*   not given */
#define	  TW_SZEXP	0x0004	/*   explicitly given */
#define	TW_DST	0x0010		/* daylight savings time */
#define	TW_ZONE	0x0020		/* use numeric timezones only */
};

void    twscopy ();
int	twsort ();
long	twclock ();
char   *dasctime (), *dtimezone (), *dctime (), *dtimenow ();
struct tws *dgmtime(), *dlocaltime (), *dparsetime (), *dtwstime ();

#ifndef	ATZ
#define	dtime(cl)	dasctime (dlocaltime (cl), TW_ZONE)
#else
#define	dtime(cl)	dasctime (dlocaltime (cl), TW_NULL)
#endif
#define	dtwszone(tw)	dtimezone (tw -> tw_zone, tw -> tw_flags)


extern char   *tw_dotw[], *tw_ldotw[], *tw_moty[];
@


1.3
log
@add ID
@
text
@d2 1
a2 1
/* @@(#)$Id:$ */
d44 1
a44 1
#else	ATZ
d46 1
a46 1
#endif	ATZ
@


1.2
log
@Fixes from Van Jacobson
@
text
@d2 1
@


1.1
log
@Initial revision
@
text
@d24 1
a24 1
#define	TW_SDAY	0x0007		/* how day-of-week was determined */
d28 3
@
