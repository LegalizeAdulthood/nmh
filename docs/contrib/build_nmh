#! /bin/sh
#
# Configures and builds nmh.
# * If this script is not invoked from an nmh source directory, it
#   will attempt to download the nmh sources.
# * This script retrieves configuration from the first existing nmh
#   installation on your $PATH, if any.
# * Unless the -y option is provided, this script then interactively
#   walks you through confirmation of common configuration settings.
#
# This file can be downloaded and immediately run using, e.g.,
#   wget http://git.savannah.gnu.org/cgit/nmh.git/plain/docs/contrib/build_nmh
#   sh build_nmh
#
# Typical usage:
# The first time you invoke this script, use the -i option to install
# nmh in the specified location.  The script will walk you through the
# common nmh configuration settings.  The -v option will cause display
# of brief progress indicators.  Be sure to add the bin directory of
# the install location to your $PATH, if not already there.
# Subsequently, invoke this script with the -y option, to use the
# relevant configuration settings from the installed nmh without
# confirmation.
#
# Option summary:
#   First time use:
#     -b <branch> to specify branch to check out, only if downloading sources
#     -i to install nmh
#     -v to display progress
#   Subsequent uses, assuming installed nmh bin directory is on $PATH:
#     -y to accept all configuration options without confirmation
#   Output control:
#     -l <logfile name>, default 'build_nmh.log', - for stdout/stderr
#   Advanced/developer use:
#     -c to run 'make distcheck' instead of 'make check'
#     -d to build nmh with debug enabled
#     -s to use 'make superclean': requires recent autoconf and automake,
#        see docs/README.developers
#     -r to build rpm
#
# On Fedora, at least these rpms must be installed:
#   gdbm-devel
#   ncurses-devel
#   cyrus-sasl-devel, if using sasl
#   openssl-devel, if using TLS
#   libcurl-devel, if using oauth
#   autoconf and automake, with -s (see docs/README.developers for versions)
#   rpm-build, with -r

usage="usage: $0
  [-b <branch>, only if downloading]
  [-c to run 'make distcheck' instead of 'make check']
  [-d to build nmh with debug enabled]
  [-i to install nmh]
  [-l <logfile name>, default '$logfile']
  [-r to build rpm]
  [-s to use 'make superclean': requires recent autoconf and automake]
  [-v to display progress]
  [-y to accept all configuration options without confirmation]"

#### Exit with error message.
die() {
  echo "$0: $*" 1>&2
  exit 1
}

#### Find location of a program.  Bourne shell just puts the name in
#### $0 if it's found from the PATH, so search that if necessary.
finddir() {
  case $1 in
    */*) dirname "$1" ;;
    *  ) IFS=:
         for d in $PATH; do
           [ -f "${d:=.}/$1"  -a  -x "$d/$1" ]  &&  printf %s "$d"  &&  break
         done ;;
  esac
}

gitrepo=git.savannah.nongnu.org
invocation="$0 $*"
tmpfile=/tmp/build_nmh-$$.log
trap 'rm -f "$tmpfile"' EXIT

####
#### Interpret command arguments.
####
branch=master
check=check
debug=0
install=0
logfile=build_nmh.log
build_rpm=0
superclean=0
verbose=0
yes=0

while getopts 'cb:dil:rsvy?' arg; do
  case $arg in
    b  ) branch="$OPTARG" ;;
    c  ) check=distcheck ;;
    d  ) debug=1 ;;
    i  ) install=1 ;;
    l  ) logfile=$OPTARG ;;
    r  ) build_rpm=1 ;;
    s  ) superclean=1 ;;
    v  ) verbose=1 ;;
    y  ) yes=1 ;;
    '?') echo "$usage"; exit 0 ;;
  esac
done
shift `expr $OPTIND - 1`

#### Redirect all output to tmp file.  Then at end of script, copy
#### it to either logfile or stdout.  Also, grep it for errors and
#### warnings.
exec 3>&1 >"$tmpfile" 2>&1

echo "$invocation"

#### No non-option command line arguments are supported.
[ $# -gt 0 ]  &&  die "$usage"

#### Check to see that we're in a nmh source directory.
if grep 'the authors of nmh' COPYRIGHT >/dev/null 2>&1; then
  :
else
  #### Download sources from repo.
  gitdir=`finddir git`
  if [ "$gitdir" ]; then
    #### Use git repo.
    [ "$verbose" -eq 0 ]  &&  git_opts=--quiet
    [ "$branch" == master ]  ||
      git_opts="${git_opts:+$git_opts }--branch $branch"
    if "$gitdir"/git clone $git_opts "git://$gitrepo/nmh.git"; then
      cd nmh  ||  die "failed to clone nmh"
      printf "commit %s\n" `git log --max-count=1 --pretty=format:%H`
    else
      die 'failed to clone git repo'
    fi
  else
    [ -e nmh-"$branch" ]  &&  die "nmh-$branch exists, will not overrwrite"

    #### Use snapshot.
    tarball="nmh-$branch.tar.gz"
    repo="http://$gitrepo/cgit/nmh.git/snapshot"
    snapshot="$repo/$tarball"
    if [ "`finddir wget`" ]; then
      [ "$verbose" -eq 0 ] && wget_opts='--quiet'
      wget --output-document - $wget_opts "$snapshot" | tar xzf -
    elif [ "`finddir curl`" ]; then
      [ "$verbose" -eq 0 ] && curl_opts='--silent --show-error'
      curl --location $curl_opts "$snapshot" | tar xzf -
    else
      die 'unable to find program to download nmh sources'
    fi

    if [ -d nmh-"$branch" ]; then
      cd nmh-"$branch"  ||  die "failed to download and extract nmh-$branch"
    else
      die "failed to download nmh-$branch sources"
    fi
  fi
fi

####
#### Set up configure options.  Handle options that can have embedded
#### spaces (currently just smtpservers) specially.
####

#### Here are the config options that we will try to detect, then
#### confirm, and finally set.
config_prefix=/usr/local/nmh
config_locking=
config_mts=smtp
config_smtpservers=localhost
config_sasl=n
config_tls=n
config_oauth=n
config_debug=n


#### Figure out whether or not to use -n with tail.
case `printf 'OK\n' | tail -n 1 2>&1` in
  OK) tail='tail -n ' ;;
  *)  tail='tail -' ;;
esac

if install-mh -check >/dev/null 2>&1; then
  #### Determine config options from installed nmh.
  mhbin=`finddir install-mh`

  config_prefix=`cd $mhbin/.. && pwd`

  mtsconf=`mhparam etcdir`/mts.conf
  if [ -f "$mtsconf" ]; then
    mts_entry=`grep '^mts:' "$mtsconf"`
    if [ "$mts_entry" ]; then
      mts=`echo "$mts_entry" | sed -e 's/^mts: *//'`
      if [ "$mts"  -a  "$mts" != smtp ]; then
        config_mts="$mts"
      fi
    fi

    mtsconfservers=`grep '^servers:' "$mtsconf"`
    if [ "$mtsconfservers" ]; then
      servers=`echo "$mtsconfservers" | \
               sed -e 's/^servers: *//' -e 's/ /\\\ /g'`
      [ "$servers" ]  &&  config_smtpservers="$servers"
    fi
  fi

  if test -x "$mhbin/mhparam"; then
    if mhparam sasl >/dev/null; then
      case `$mhbin/mhparam sasl` in
        *sasl*) config_sasl=y ;;
      esac

      case `$mhbin/mhparam tls` in
        *tls*) config_tls=y ;;
      esac

      case `$mhbin/mhparam oauth` in
        *oauth*) config_oauth=y ;;
      esac
    else
      tput smso
      echo "$0: SASL, TLS, and OAuth2 detection not supported with current nmh"
      [ $yes -eq 1 ]  &&  echo "will not configure them in"
      tput rmso
    fi
  fi
fi

[ $debug -ge 1 ]  &&  config_debug=y

if [ $yes -eq 0 ]; then
  #### Confirm each config setting with user.
  printf 'Install prefix [%s]: ' $config_prefix >&3
  read prefix
  [ "$prefix" ]  &&  config_prefix="$prefix"

  printf 'Locking type (dot|fcntl|flock|lockf) [determined by configure]: ' >&3
  read locking
  [ "$locking" ]  &&  config_locking="$locking"

  printf 'MTS (smtp|sendmail/smtp|sendmail/pipe) [%s]: ' $config_mts >&3
  read mts
  [ "$mts" ]  &&  config_mts="$mts"

  if [ "$config_mts" = smtp ]; then
    printf 'SMTP server(s), space separated [%s]: ' $config_smtpservers >&3
    read response
    servers=`echo $response | sed -e 's/ /\\\ /g'`
    [ "$servers" ]  &&  config_smtpservers="$servers"
  fi

  printf 'Cyrus SASL support [%s]: ' $config_sasl >&3
  read response
  [ "$response" = y  -o  "$response" = Y ]  &&  config_sasl=y

  printf 'TLS support [%s]: ' $config_tls >&3
  read response
  [ "$response" = y  -o  "$response" = Y ]  &&  config_tls=y

  printf 'OAuth2 support [%s]: ' $config_oauth >&3
  read response
  [ "$response" = y  -o  "$response" = Y ]  &&  config_oauth=y

  #### Don't confirm debug here:  obey the -d option to this script.
fi

smtpservers=
config_opts="--prefix=$config_prefix"

[ "$config_locking" ]  &&
  config_opts="$config_opts --with-locking=$config_locking"
[ "$config_mts"  -a  "$config_mts" != smtp ]  &&
  config_opts="$config_opts --with-mts=$config_mts"
[ "$config_smtpservers"  -a  "$config_smtpservers" != localhost ]  &&
  smtpservers="--with-smtpservers=$config_smtpservers"
[ "$config_sasl" = y ]  &&  config_opts="$config_opts --with-cyrus-sasl"
[ "$config_tls" = y ]  &&  config_opts="$config_opts --with-tls"
[ "$config_oauth" = y ]  &&  config_opts="$config_opts --with-oauth"
[ $config_debug = y ]  &&  config_opts="$config_opts --enable-assert"

#### dotlocking, the usual default, requires chgrp and chmod of inc.
installpriv=
if [ $install -ge 1  -a  "$LOGNAME" != root ]; then
  if [ "$config_locking" = dot ]; then
    echo "$0: "'install requires chgrp and chmod 2755'
    echo 'so will sudo to install.  Terminate with Ctrl-C if unacceptable.'
    installpriv=sudo
  fi
fi

[ -x tools/showbuildenv ]  &&  tools/showbuildenv | grep -Ev 'PID=|SHLVL'


####
#### Set up with autoconfig if necessary.
####
if [ -f Makefile ]; then
  [ $verbose -ge 1 ]  &&  echo cleaning . . . >&3
  if [ $superclean -ge 1 ]; then
    make superclean >/dev/null
  else
    make distclean >/dev/null
  fi
fi

if [ ! -f configure  -o  ! -f Makefile.in ]; then
  [ $verbose -ge 1 ]  &&  echo autoconfiguring . . . >&3
  ./autogen.sh
  [ $? -ne 0 ]  &&
    die "autogen failed, see MACHINES file for autoconf,
automake, flex, and bison requirements"
fi


####
#### Build.
####
[ $verbose -ge 1 ]  &&  echo configuring . . . >&3
if [ -z "$CFLAGS" ]; then
  #### Only use these flags with gcc.
  if cc -dM -E - </dev/null 2>&1 | grep __GNUC__ >/dev/null; then
    #### configure will supply -g -O2 with gcc, but only if CFLAGS
    #### isn't defined.
    CFLAGS='-g -O2 -ansi -pedantic'
  fi
fi

printf '\n./configure %s\n' "$config_opts${smtpservers:+ $smtpservers}"
./configure CFLAGS="${CFLAGS}" $config_opts${smtpservers:+" $smtpservers"}
status=$?

if [ $status -eq 0 ]; then
  [ $verbose -ge 1 ]  &&  echo building . . . >&3
  make
  status=$?

  if [ $status -eq 0 ]; then
    if [ "$TESTS_SHELL"x = x ]; then
      #### Bonus:  use heirloom shell to test, if available, and if
      #### TESTS_SHELL hadn't already been set.
      heirloom_shell=/usr/lib/heirloom/5bin/sh
      if [ -x "$heirloom_shell" ]; then
        TESTS_SHELL="$heirloom_shell"; export TESTS_SHELL
      fi
    fi

    if [ "$CFLAGS" ]; then
        #### Pass DISTCHECK_CONFIGURE_FLAGS through an environment
        #### variable to avoid automake's quoting.
        DISTCHECK_CONFIGURE_FLAGS="CFLAGS='${CFLAGS}'"
        export DISTCHECK_CONFIGURE_FLAGS
    fi

    [ $verbose -ge 1 ]  &&  echo testing . . . >&3
    checkoutput=`make $check AM_COLOR_TESTS=always`
    status=$?

    tests_summary=`echo "$checkoutput" | grep tests`
    #### If multiple tests not run, that line will be caught by the
    #### "grep tests" above.
    test_not_run=`echo "$checkoutput" | grep 'test was not run'`
    fails=`echo "$checkoutput" | grep FAIL`
    if [ "$tests_summary" ]; then
      echo '==================='
      [ "$test_not_run" ]  &&  echo "$test_not_run"
      [ "$fails" ]  &&  echo "$fails"
      echo "$tests_summary"
      echo '==================='
      [ "$check" = distcheck ]  &&  echo "$checkoutput" | ${tail}4
    fi

    if [ $status -eq 0 ]; then
      if [ $install -ge 1 ]; then
        [ $verbose -ge 1 ]  &&  echo installing . . . >&3
        ($installpriv make install) >/dev/null
        status=$?
      fi

      if [ $status -eq 0  -a  $build_rpm -ge 1 ]; then
        [ $verbose -ge 1 ]  &&  echo building rpm . . . >&3
        make rpm >/dev/null
        status=$?
      fi
    fi
  fi
fi

####
#### Report results.
####

#### Disable output redirection (and flush) so that we can grep.
exec 1>&3 3>&-

if [ "$logfile" != - ]; then
  rm -f "$logfile"
  exec 3>&1 >"$logfile" 2>&1
fi

cat "$tmpfile"
grep -E 'Error|warn' "$tmpfile"

if [ $status -eq 0 ]; then
  [ $verbose -ge 1 ]  &&  echo build completed successfully >&3
else
  echo build failed!
  [ "$logfile" = - ]  ||  echo "build failed, build log is in $logfile" >&3
fi

exit $status
